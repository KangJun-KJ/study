<template>
    <div class='section'>
        <back-btn></back-btn>
        <h1>2.7.1 使用s-transition指令实现过渡动画</h1>
        <div>
            <h3>通过改变opacity</h3>
            <button on-click="toggle">toggle</button>
            <span s-if="show" s-transition="hook">
                Transition Layer
            </span>
        </div>

        <div>
            <h3>通过改变class</h3>
            <button on-click="toggle2">toggle</button>
            <span s-if="show2" s-transition="hook2">
                Transition Layer
            </span>
        </div>
    </div>
</template>

<script>
    import backBtn from '@/components/backHomeBtn'
    export default {
        components:{
            "back-btn":backBtn
        },
        initData() {
            return {
                show: true,
                show2: true
            };
        },
        toggle() {
            this.data.set('show',!this.data.get('show'));
        },
        toggle2() {
            this.data.set('show2',!this.data.get('show2'));
        },
        attached(){
            if (!window.requestAnimationFrame) {
                window.requestAnimationFrame = function(fn) {
                    setTimeout(fn, 17);
                };    
            }
        },
        hook:function() {
            /* your answer */
             return {
                enter: function (el, done) {

                    var steps = 20;
                    var currentStep = 0;

                    function goStep() {
                        if (currentStep >= steps) {
                            el.style.opacity = 1;
                            done();
                            return;
                        }

                        el.style.opacity = 1 / steps * currentStep++;
                        requestAnimationFrame(goStep);
                    }

                    goStep();
                },

                leave: function (el, done) {

                    var steps = 20;
                    var currentStep = 0;

                    function goStep() {
                        if (currentStep >= steps) {
                            el.style.opacity = 0;
                            done();
                            return;
                        }

                        el.style.opacity = 1 - 1 / steps * currentStep++;
                        requestAnimationFrame(goStep);
                    }

                    goStep();
                }
            }
        },
        //获取元素的transition-duration时间
        getElTransitionDurTime(el){
            return parseFloat(getComputedStyle(el).transitionDuration)*1000;
        },
        hook2(){
            const _this=this;
            return {
                enter(el,done){
                    el.classList.add("before-enter");
                    setTimeout(()=>{
                        el.classList.remove("before-enter");
                        el.classList.add("enter");
                        setTimeout(()=>{
                            el.classList.remove("enter");
                            done();
                        },_this.getElTransitionDurTime(el));
                    },0);
                    
                },
                leave(el,done){
                    el.classList.add("before-leave");
                    setTimeout(()=>{
                        el.classList.remove("before-leave");
                        el.classList.add("leave");
                        setTimeout(()=>{
                            el.classList.remove("leave");
                            done();
                        },_this.getElTransitionDurTime(el));
                    },0);
                    
                }
            }
        }
    }
</script>

<style>
    .section{
        width:90%;
        margin:0 auto;
    }
    .enter, .leave {
        transition: all .5s;
    }

    .before-enter, .leave {
        opacity: 0;
    }

    .enter, .before-leave {
        opacity: 1;
    }
</style>